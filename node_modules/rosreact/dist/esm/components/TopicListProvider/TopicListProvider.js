import React, { createContext, useState, useEffect } from "react";
import PropTypes from "prop-types";
import { useRos } from "../RosConnection";
import { useCheckedContext } from "../common";
var initialTopics = [];
var initialTypes = [];
var TopicListContext = createContext({ topics: initialTopics, types: initialTypes });
export var TopicListProvider = function (props) {
    var ros = useRos();
    var _a = useState({ topics: initialTopics, types: initialTypes }), topicList = _a[0], setTopicList = _a[1];
    var callback = function (newTopicList) {
        setTopicList(newTopicList);
    };
    useEffect(function () {
        if (props.trigger || props.trigger === undefined) {
            getTopicList(ros, callback, props.failedCallback);
        }
    }, [props.trigger]);
    return (React.createElement(TopicListContext.Provider, { value: topicList }, props.children));
};
TopicListProvider.propTypes = {
    children: PropTypes.node,
    trigger: PropTypes.bool,
    failedCallback: PropTypes.func,
};
export function getTopicList(ros, callback, failedCallback) {
    ros.getTopics(callback, failedCallback);
}
export function useTopicList() {
    return useCheckedContext(TopicListContext);
}
//# sourceMappingURL=TopicListProvider.js.map