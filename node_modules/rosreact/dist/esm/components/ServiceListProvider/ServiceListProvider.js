import React, { createContext, useState, useEffect } from "react";
import PropTypes from "prop-types";
import { useRos } from "../RosConnection";
import { useCheckedContext } from "../common";
var initialServices = [];
var ServiceListContext = createContext(initialServices);
export var ServiceListProvider = function (props) {
    var ros = useRos();
    var _a = useState(initialServices), serviceList = _a[0], setServiceList = _a[1];
    var callback = function (newServiceList) {
        setServiceList(newServiceList);
    };
    useEffect(function () {
        if (props.trigger || props.trigger === undefined) {
            getServiceList(ros, callback, props.failedCallback);
        }
    }, [props.trigger]);
    return (React.createElement(ServiceListContext.Provider, { value: serviceList }, props.children));
};
ServiceListProvider.propTypes = {
    children: PropTypes.node,
    trigger: PropTypes.bool,
    failedCallback: PropTypes.func,
};
export function getServiceList(ros, callback, failedCallback) {
    ros.getServices(callback, failedCallback);
}
export function useServiceList() {
    return useCheckedContext(ServiceListContext);
}
//# sourceMappingURL=ServiceListProvider.js.map