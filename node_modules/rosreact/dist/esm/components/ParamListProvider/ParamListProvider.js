import React, { useState, useEffect, createContext } from "react";
import PropTypes from "prop-types";
import { useCheckedContext } from "../common";
import { useRos } from "../RosConnection";
var initialParams = [];
var ParamListContext = createContext(initialParams);
export var ParamListProvider = function (props) {
    var ros = useRos();
    var get = props.trigger;
    var _a = useState(initialParams), paramList = _a[0], setParamList = _a[1];
    var callback = function (newParamList) {
        setParamList(newParamList);
    };
    useEffect(function () {
        if (props.trigger || props.trigger === undefined) {
            getParamList(ros, callback, props.failedCallback);
        }
    }, [props.trigger]);
    return (React.createElement(ParamListContext.Provider, { value: paramList }, props.children));
};
ParamListProvider.propTypes = {
    children: PropTypes.node,
    trigger: PropTypes.bool,
    failedCallback: PropTypes.func,
};
export function getParamList(ros, callback, failedCallback) {
    ros.getParams(callback, failedCallback);
}
export function useParamList() {
    return useCheckedContext(ParamListContext);
}
//# sourceMappingURL=ParamListProvider.js.map