import { useEffect, useRef, useState } from 'react';
import { useRos } from '../RosConnection';
import { subscribe, unsubscribe } from './getTopic';
export function useSubscription(props) {
    var _a;
    var ros = useRos();
    var topic = props.topic, messageType = props.messageType, throttleRate = props.throttleRate, latch = props.latch, queueLength = props.queueLength, queueSize = props.queueSize, customCallback = props.customCallback, compareFunc = props.compareFunc;
    var _b = useState((_a = props.messageInitialValue) !== null && _a !== void 0 ? _a : null), message = _b[0], setMessage = _b[1];
    var messageRef = useRef(message);
    useEffect(function () {
        var updateMessage = function (msg) {
            setMessage(msg);
            messageRef.current = msg;
        };
        var messageCallback = function (newMsg) {
            if (compareFunc) {
                var compareRes = compareFunc(messageRef.current, newMsg);
                // The values are the same, return.
                if (compareRes === true || compareRes === 0) {
                    return;
                }
            }
            if (customCallback) {
                customCallback(newMsg);
            }
            updateMessage(newMsg);
        };
        var subscription = subscribe(ros, {
            topic: topic,
            messageType: messageType,
            throttleRate: throttleRate,
            latch: latch,
            queueLength: queueLength,
            queueSize: queueSize,
        }, messageCallback);
        return function () {
            unsubscribe(subscription, messageCallback);
        };
    }, [
        ros,
        topic,
        messageType,
        throttleRate,
        latch,
        queueLength,
        queueSize,
        customCallback,
        compareFunc,
    ]);
    return message;
}
//# sourceMappingURL=useSubscription.js.map