var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import hash from 'object-hash';
import { Topic } from 'roslib';
import { v4 as uuidv4 } from 'uuid';
var sharedTopics = {};
var TOPIC_REMOVE_TIMEOUT = 500;
function tryUnregister(topic) {
    setTimeout(function () {
        if (topic.settingsHash === undefined || topic.settingsHash === '') {
            return;
        }
        if (!topic.hasListeners()) {
            delete sharedTopics[topic.settingsHash];
        }
    }, TOPIC_REMOVE_TIMEOUT);
}
export function getTopic(ros, partialSettings) {
    var _a, _b, _c, _d;
    if (ros.uid === undefined || ros.uid === '') {
        ros.uid = uuidv4();
    }
    var settings = {
        topic: partialSettings.topic,
        messageType: partialSettings.messageType,
        throttleRate: (_a = partialSettings.throttleRate) !== null && _a !== void 0 ? _a : 10,
        latch: (_b = partialSettings.latch) !== null && _b !== void 0 ? _b : false,
        queueLength: (_c = partialSettings.queueLength) !== null && _c !== void 0 ? _c : 1,
        queueSize: (_d = partialSettings.queueSize) !== null && _d !== void 0 ? _d : 10,
    };
    // Hash to tell different ros connections apart
    var hashObj = __assign({ uid: ros.uid }, settings);
    var hashStr = hash(hashObj, { respectType: false });
    if (sharedTopics[hashStr] === undefined) {
        // Create new topic
        var newTopic = new Topic({
            ros: ros,
            name: settings.topic,
            messageType: settings.messageType,
            throttle_rate: settings.throttleRate,
            latch: settings.latch,
            queue_length: settings.queueLength,
            queue_size: settings.queueSize,
        });
        newTopic.settingsHash = hashStr;
        sharedTopics[hashStr] = newTopic;
    }
    /*
    If it has the correct hash, then it listens on the right topic,
    and has the correct messageType. Should be safe to cast.
     */
    return sharedTopics[hashStr];
}
export function subscribe(ros, settings, callback) {
    var topic = getTopic(ros, settings);
    topic.subscribe(callback);
    return topic;
}
export function unsubscribe(topic, callback) {
    if (callback) {
        topic.unsubscribe(callback);
    }
    else {
        topic.unsubscribe();
    }
    tryUnregister(topic);
}
//# sourceMappingURL=getTopic.js.map