import React, { useEffect, useState, createContext } from 'react';
import PropTypes from 'prop-types';
import { useRos } from '../RosConnection';
import { Param as RosParam } from 'roslib';
import { useCheckedContext } from '../common';
var ParamContext = createContext(null);
export var Param = function (props) {
    var ros = useRos();
    var param = new RosParam({ ros: ros, name: props.name });
    var _a = useState(null), paramValue = _a[0], setParamValue = _a[1];
    useEffect(function () {
        if (!(props.setValue == null) && !(props.setCallback == null)) {
            param.set(props.setValue, props.setCallback);
        }
    }, [props.setValue]);
    useEffect(function () {
        if (props.get === true) {
            param.get(function (response) {
                setParamValue(response);
            });
        }
    }, [props.get]);
    useEffect(function () {
        if (props.delete === true) {
            var deleteCallback = props.deleteCallback || (function (resp) { ; });
            param.delete(deleteCallback);
        }
    }, [props.delete]);
    return (React.createElement(ParamContext.Provider, { value: paramValue }, props.children));
};
;
Param.propTypes = {
    children: PropTypes.node,
    name: PropTypes.string.isRequired,
    setValue: PropTypes.any,
    delete: PropTypes.bool,
    setCallback: PropTypes.func,
    deleteCallback: PropTypes.func,
};
export function useParam() {
    return useCheckedContext(ParamContext);
}
;
//# sourceMappingURL=Param.js.map