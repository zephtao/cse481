import React from 'react';
import PropTypes from 'prop-types';
import { Ros, ServiceResponse } from 'roslib';
export declare const ServiceCaller: {
    (props: ServiceCallerProps): React.JSX.Element;
    propTypes: {
        name: PropTypes.Validator<string>;
        serviceType: PropTypes.Requireable<string>;
        trigger: PropTypes.Requireable<boolean>;
        request: PropTypes.Requireable<object>;
        callback: PropTypes.Requireable<(...args: any[]) => any>;
        failedCallback: PropTypes.Requireable<(...args: any[]) => any>;
    };
};
export type DefaultSrvReqType = object;
export type DefaultSrvRespType = ServiceResponse;
export interface ServiceCallerProps<TReq = DefaultSrvReqType, TResp = DefaultSrvRespType> {
    name: string;
    serviceType: string;
    trigger?: boolean;
    request?: TReq;
    callback?: (resp: TResp) => void;
    failedCallback?: (error: any) => void;
}
export type ServiceCB<TReq = DefaultSrvReqType, TResp = DefaultSrvRespType> = ServiceCallerProps<TReq, TResp>['callback'];
export declare function callService<TReq = DefaultSrvReqType, TResp = DefaultSrvRespType>(ros: Ros, name: string, serviceType: string, request?: TReq, callback?: ServiceCB<unknown, TResp>, failedCallback?: (error: any) => void): void;
